JVM 정리

❓개념
자바 가상머신 -> JVM(Java Virtual Machine)은 자바 프로그램의 실행환경을 만들어주는 소프트웨어입니다

❓왜 사용하는지
자바가상머신을 사용하는 가장 큰 이유는 하나의 바이트코드 즉 (.class)파일로 모든 플랫폼에서 작동이 가능해서 사용합니다

아래의 경우는 c언어의 경우입니다.

컴파일 플랫폼과 타겟플랫폼이 다르면 프로그램 실행이 불가능하다는 단점이 있습니다.

하지만, 자바의 경우

독립적인 자바 컴파일러를 사용하여 타겟플랫폼이 원하는 컴파일 플랫폼으로 가상머신을 생성해줍니다.

덧붙이자면,
“ Java는 플랫폼에 종속적이지 않지만, Jvm은 플랫폼에 종속적” 라고 표현이 가능 할 것 같습니다.
자바는 여러가지 운영체제를 사용할수 있지만 관련 os로 변환이되는 jvm은 플랫폼이 종속적이게 됩니다.

❓자바 프로그램의 실행과정

우리가 자바로 .java 코드를 작성하고 터미널에 있는 자바 컴파일러인 javac에 컴파일 명령을 내리면 .class 파일이 만들어집니다. 이후 이 바이트 코드는 클래스 로더를 통해 JVM Runtime Data Area로 로딩되고 로딩된 .class 바이트 코드를 실행할 컴퓨터에 깔린 JVM에 가져다주면 그 컴퓨터가 이 프로그램을 실행할 때 이 JVM이 그때그때 기계어로 해석합니다. 

❓바이트 코드를 읽는 방식
Jvm은 바이트코드를 명령어 단위로 해석합니다.
인터프리터 방식과 JIT방식으로 두가지 방식을 혼합하여 해석하게 됩니다.
인터프리터 방식은 바이트 코드를 한줄씩 해석하는 방식이어서 실행속도가 매우 느리다는 단점이 있습니다.
이를 보완하기 위하여 만들어 진것이 JIT입니다.
바이트코드를 JIT 컴파일러를 이용하여 프로그램을 실제 실행하는 시점에 각 OS에 맞는 native code로 변환시켜서 실행속도를 개선 하였습니다.
하지만 JIT 컴파일러가 native code로 변환시키는 것도 비용이 들기 때문에 우선, 인터프리터 방식으로 컴파일 하다가 일정 수치가 넘어가게 되면 JIT 컴파일러로 해석하게 됩니다.

❓JIT 란?
JIT의 약어는 just in time 입니다.
JIT가 자바인터프리터 방식을 개선하기 위하여 만들어진 것은 위에 설명 했고, 또 JIT를 설명하는 다른 방법은 JIT는 자바인터프리터와 다르게 같은 코드를 매번 해석하지 않고 실행할때 컴파일하면서 해당 코드를 캐싱 해버립니다. 이후에는 변경된 부분만 컴파일 하고 나머지는 캐싱된 코드를 사용합니다. 이렇듯 JIT 컴파일러는 운영체제에 맞는 코드를 변환시켜서 실행하기 때문에 기존에 사용하던 자바인터프리터 방식의 10배~20배 정도 성능 차이를 보입니다.
