(10/09) 정리는 되었지만 좀더 다듬은 후 제대로 Pdf파일로 올릴 예정입니다

Spring 에서 자주 사용되는 Annotation


@Component

개발자가 생성한 Class를 Spring에 Bean으로 등록할 때 사용하는 어노테이션입니다.
Spring은 해당 어노테이션을 보고 spring의 Bean에 등록합니다.


@ComponentScan

Spring framework 는 @Component, @Service, @Repository, @Controller, @Configuration 중 한개라도 등록된 클래스를 찾으면, Context에 bean으로 등록합니다.
@ComponentScan 어노테이션이 있는 클래스의 하위 bean을 등록 될 클래스들을 스캔 하여 bean으로 등록해줍니다.


@Bean

@Bean 어노테이션은 개발자가 제어 불가능한 외부 라이브러리와 같은 것들을 bean으로 만들 때 사용합니다.


@Controller

Spring에게 해당 Class가 Controller의 역할을 한다고 명시하기 위해 사용하는 어노테이션

——————————————————————————————
@Controller                   // 이 Class는 Controller 역할을 합니다
@RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
public class UserController {
    @RequestMapping(method = RequestMethod.GET)
    public String getUser(Model model) {
        //  GET method, /user 요청을 처리
    }
}
——————————————————————————————

@RequestHeader

Request의 header값을 가져올 수 있으며, 해당 어노테이션을 쓴 메소드의 파라미터에 사용합니다.


@RequestMapping

@RequestMapping(value=“”)와 같은 형태로 작성하며, 요청 들어온 URL 요청과 어노테이션 value 값이 일치하면 해당 클래스나 메소드가 실행됩니다. Controller 객체 안의 메서드와 클래스에 적용 가능합니다. 
그러나 최근엔 확실하게 보이기 위해서 다른 어노테이션을 자주 활용합니다.

- @GetMapping, @PostMapping 등 명시적으로 확인이 가능한 것으로 자주 사용합니다.


@RequestParam

URL에 전달되는 파라미터를 메소드의 인자와 매칭시켜, 파라미터를 받아서 치리할 수 있는 어노테이션으로 아래와 같이 사용합니다. Json형식의 Body를 MessageConverter를 통해 Java 객체로 변환시킵니다.
——————————————————————————————
@Controller                   // 이 Class는 Controller 역할을 합니다
@RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
public class UserController {
    @RequestMapping(method = RequestMethod.GET)
    public String getUser(@RequestParam String nickname, @RequestParam(name="old") String age {
        // GET method, /user 요청을 처리
        // https://naver.com?nickname=dog&old=10
        String sub = nickname + "_" + age;
        ...
    }
}
——————————————————————————————


@RequestBody

Body에 전달되는 데이터를 메소드의 인자와 매칭시켜, 데이터를 받아서 처리할 수 있는 Annotation으로 아래와 같이 사용합니다. 클라이언트가 보내는 HTTP 요청 본문(JSON 및 XML 등)을 Java 오브젝트로 변환합니다. 아래와 같이 사용합니다.
클라이언트가 body에 json or xml 과 같은 형태로 형태로 값(주로 객체)를 전송하면, 해당 내용을 Java Object로 변환합니다.

——————————————————————————————
@Controller                   // 이 Class는 Controller 역할을 합니다
@RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
public class UserController {
    @RequestMapping(method = RequestMethod.POST)
    public String addUser(@RequestBody User user) {
        //  POST method, /user 요청을 처리
        String sub_name = user.name;
        String sub_old = user.old;
    }
}
——————————————————————————————

@ModelAttribute

클라이언트가 전송하는 HTTP parameter, Body 내용을 Setter 함수를 통해 1:1로 객체에 데이터를 연결(바인딩)합니다. RequestBody와 다르게 HTTP Body 내용은 multipart/form-data 형태를 요구합니다. @RequestBody가 json을 받는 것과 달리 @ModenAttribute 의 경우에는 json을 받아 처리할 수 없습니다.


@ResponseBody

@ResponseBody은 메소드에서 리턴되는 값이 View 로 출력되지 않고 HTTP Response Body에 직접 쓰여지게 됩니다. return 시에 json, xml과 같은 데이터를 return 합니다.

——————————————————————————————
@Controller                   // 이 Class는 Controller 역할을 합니다
@RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
public class UserController {
    @RequestMapping(method = RequestMethod.GET)
    @ResponseBody
    public String getUser(@RequestParam String nickname, @RequestParam(name="old") String age {
        // GET method, /user 요청을 처리
        // https://naver.com?nickname=dog&old=10
        User user = new User();
        user.setName(nickname);
        user.setAge(age);
        return user;
    }
}
——————————————————————————————

@Autowired

Spring Framework에서 Bean 객체를 주입받기 위한 방법은 크게 아래의 3가지가 있습니다. Bean을 주입받기 위하여 @Autowired 를 사용합니다. Spring Framework가 Class를 보고 Type에 맞게(Type을 먼저 확인 후, 없으면 Name 확인) Bean을 주입합니다.
* @Autowired
* 생성자 (@AllArgsConstructor 사용)
* setter


@SpringBootTest

Spring Boot Test에 필요한 의존성을 제공해줍니다.


@Test

JUnit에서 테스트 할 대상을 표시합니다.

